package net.amcintosh.freshbooks.resources;

import com.google.api.client.http.HttpMethods;
import com.google.common.collect.ImmutableMap;
import net.amcintosh.freshbooks.FreshBooksClient;
import net.amcintosh.freshbooks.FreshBooksException;
import net.amcintosh.freshbooks.models.*;
import net.amcintosh.freshbooks.models.api.AccountingListResponse;
import net.amcintosh.freshbooks.models.api.AccountingResponse;
import net.amcintosh.freshbooks.models.builders.IncludesQueryBuilder;
import net.amcintosh.freshbooks.models.builders.QueryBuilder;
import net.amcintosh.freshbooks.resources.api.AccountingResource;

import java.util.List;
import java.util.Map;

/**
 * FreshBooks expenses resource with calls to get, list, create, update, delete
 */
public class Expenses extends AccountingResource {

    public Expenses(FreshBooksClient freshBooksClient) {
        super(freshBooksClient);
    }

    @Override
    protected String getPath() {
        return "expenses/expenses";
    }

    /**
     * Get a list of expenses using the query strings generated by the QueryBuilder list.
     *
     * @param accountId Id of the account
     * @return ExpenseList containing expenses and pagination details
     * @throws FreshBooksException If the call is not successful
     */
    public ExpenseList list(String accountId) throws FreshBooksException {
        return this.list(accountId, null);
    }

    /**
     * Get a list of expenses using the query strings generated by the QueryBuilder list.
     *
     * @param accountId Id of the account
     * @param builders List of QueryBuilders
     * @return ExpenseList containing expenses and pagination details
     * @throws FreshBooksException If the call is not successful
     */
    public ExpenseList list(String accountId, List<QueryBuilder> builders) throws FreshBooksException {
        String url = this.getUrl(accountId, builders);
        AccountingListResponse result = this.handleListRequest(url);
        return new ExpenseList(result.response.result);
    }

    /**
     * Get a single expense with the corresponding id.
     *
     * @param accountId The alpha-numeric account id
     * @param expenseId Id of the resource to return
     *
     * @return The Expense
     * @throws FreshBooksException If the call is not successful
     */
    public Expense get(String accountId, long expenseId) throws FreshBooksException {
        return this.get(accountId, expenseId, null);
    }

    /**
     * Get a single expense with the corresponding id.
     *
     * @param accountId The alpha-numeric account id
     * @param expenseId Id of the resource to return
     * @param builder IncludesQueryBuilder object for including additional data, sub-resources, etc.
     *
     * @return The Expense
     * @throws FreshBooksException If the call is not successful
     */
    public Expense get(String accountId, long expenseId, IncludesQueryBuilder builder) throws FreshBooksException {
        String url = this.getUrl(accountId, expenseId, builder);
        AccountingResponse result = this.handleRequest(HttpMethods.GET, url);
        return result.response.result.expense;
    }

    /**
     * Create a new expense from the provided Expense model.
     * Makes a POST call against the expense resource endpoint.
     * <br><br>
     * This calls <code>expense.getContent()</code> to get a hash map of data.
     *
     * @param accountId The alpha-numeric account id
     * @param data Expense model with create data
     *
     * @return The created Expense
     * @throws FreshBooksException If the call is not successful
     */
    public Expense create(String accountId, Expense data) throws FreshBooksException {
        return this.create(accountId, data.getContent());
    }

    /**
     * Create a new expense from the provided data.
     * Makes a POST call against the expense resource endpoint.
     *
     * @param accountId The alpha-numeric account id
     * @param data Map of create data
     *
     * @return The created Expense
     * @throws FreshBooksException If the call is not successful
     */
    public Expense create(String accountId, Map<String, Object> data) throws FreshBooksException {
        String url = this.getUrl(accountId);
        ImmutableMap<String, Object> content = ImmutableMap.of("expense", data);
        AccountingResponse result = this.handleRequest(HttpMethods.POST, url, content);
        return result.response.result.expense;
    }

    /**
     * Update the expense with the corresponding id.
     * Makes a PUT call against the expense resource endpoint.
     *
     * @param accountId The alpha-numeric account id
     * @param expenseId Id of the resource to return
     * @param data Expense model with updated data
     *
     * @return The updated Expense
     * @throws FreshBooksException If the call is not successful
     */
    public Expense update(String accountId, long expenseId, Expense data) throws FreshBooksException {
        return this.update(accountId, expenseId, data.getContent());
    }

    /**
     * Update the expense with the corresponding id.
     * Makes a PUT call against the expense resource endpoint.
     *
     * @param accountId The alpha-numeric account id
     * @param expenseId Id of the resource to update
     * @param data Map of data to change
     *
     * @return The updated Expense
     * @throws FreshBooksException If the call is not successful
     */
    public Expense update(String accountId, long expenseId, Map<String, Object> data) throws FreshBooksException {
        String url = this.getUrl(accountId, expenseId);
        ImmutableMap<String, Object> content = ImmutableMap.of("expense", data);
        AccountingResponse result = this.handleRequest(HttpMethods.PUT, url, content);
        return result.response.result.expense;
    }

    /**
     * Delete the expense with the corresponding id.
     * Makes a PUT call against the expense resource endpoint with a `vis_state` of deleted.
     * <br><br>
     * <i>Note:</i> Most FreshBooks resources are soft-deleted,
     * @see <a href="https://www.freshbooks.com/api/active_deleted">FreshBooks API - Active and Deleted Objects</a>
     *
     * @param accountId The alpha-numeric account id
     * @param expenseId Id of the resource to update
     *
     * @return The deleted Expense
     * @throws FreshBooksException If the call is not successful
     */
    public Expense delete(String accountId, long expenseId) throws FreshBooksException {
        ImmutableMap<String, Object> data = ImmutableMap.of("vis_state", VisState.DELETED.getValue());
        return this.update(accountId, expenseId, data);
    }

}
