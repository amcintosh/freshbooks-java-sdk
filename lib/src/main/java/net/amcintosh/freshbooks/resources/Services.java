package net.amcintosh.freshbooks.resources;

import com.google.api.client.http.HttpMethods;
import com.google.common.collect.ImmutableMap;
import net.amcintosh.freshbooks.FreshBooksClient;
import net.amcintosh.freshbooks.FreshBooksException;
import net.amcintosh.freshbooks.models.Service;
import net.amcintosh.freshbooks.models.ServiceList;
import net.amcintosh.freshbooks.models.api.ServiceResponse;
import net.amcintosh.freshbooks.models.builders.IncludesQueryBuilder;
import net.amcintosh.freshbooks.models.builders.QueryBuilder;
import net.amcintosh.freshbooks.resources.api.ServiceResource;

import java.util.List;
import java.util.Map;

/**
 * FreshBooks services resource with calls to get, list, create, update, delete
 */
public class Services extends ServiceResource {

    public Services(FreshBooksClient freshBooksClient) {
        super(freshBooksClient);
    }

    /**
     * Get a list of services using the query strings generated by the QueryBuilder list.
     *
     * @param businessId Id of the business
     * @return TaskList containing tasks and pagination details
     * @throws FreshBooksException If the call is not successful
     */
    public ServiceList list(long businessId) throws FreshBooksException {
        return list(businessId, null);
    }

    /**
     * Get a list of services using the query strings generated by the QueryBuilder list.
     *
     * @param businessId Id of the business
     * @param builders List of QueryBuilders
     * @return ServiceList containing services and pagination details
     * @throws FreshBooksException If the call is not successful
     */
    public ServiceList list(long businessId, List<QueryBuilder> builders) throws FreshBooksException {
        return new ServiceList(handleListRequest(getListUrl(businessId, builders)));
    }

    /**
     * Get a single service with the corresponding id.
     *
     * @param businessId The alpha-numeric business id
     * @param serviceId Id of the resource to return
     *
     * @return The Service
     * @throws FreshBooksException If the call is not successful
     */
    public Service get(long businessId, long serviceId) throws FreshBooksException {
        return this.get(businessId, serviceId, null);
    }

    /**
     * Get a single service with the corresponding id.
     *
     * @param businessId The alpha-numeric business id
     * @param serviceId Id of the resource to return
     * @param builder IncludesQueryBuilder object for including additional data, sub-resources, etc.
     *
     * @return The Task
     * @throws FreshBooksException If the call is not successful
     */
    public Service get(long businessId, long serviceId, IncludesQueryBuilder builder) throws FreshBooksException {
        String url = this.getUrl(businessId, serviceId, builder);
        ServiceResponse result = this.handleRequest(HttpMethods.GET, url);
        return result.service;
    }

    /**
     * Create a new service from the provided Service model.
     * Makes a POST call against the service resource endpoint.
     *
     * This calls `service.getContent()` to get a hash map of data.
     *
     * @param businessId The numeric business id
     * @param data Service model with create data
     *
     * @return The created Service
     * @throws FreshBooksException If the call is not successful
     */
    public Service create(long businessId, Service data) throws FreshBooksException {
        return create(businessId, data.getContent());
    }

    /**
     * Create a new service from the provided data.
     * Makes a POST call against the service resource endpoint.
     *
     * @param businessId The numeric business id
     * @param data Map of create data
     *
     * @return The created Service
     * @throws FreshBooksException If the call is not successful
     */
    public Service create(long businessId, Map<String, Object> data) throws FreshBooksException {
        String url = this.getUrl(businessId);
        ImmutableMap<String, Object> content = ImmutableMap.of("service", data);
        ServiceResponse result = this.handleRequest(HttpMethods.POST, url, content);
        return result.service;
    }

}
