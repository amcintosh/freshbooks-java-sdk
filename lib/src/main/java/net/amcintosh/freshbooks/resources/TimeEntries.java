package net.amcintosh.freshbooks.resources;

import com.google.api.client.http.HttpMethods;
import com.google.common.collect.ImmutableMap;
import net.amcintosh.freshbooks.FreshBooksClient;
import net.amcintosh.freshbooks.FreshBooksException;
import net.amcintosh.freshbooks.models.TimeEntry;
import net.amcintosh.freshbooks.models.TimeEntryList;
import net.amcintosh.freshbooks.models.api.ProjectListResponse;
import net.amcintosh.freshbooks.models.api.ProjectResponse;
import net.amcintosh.freshbooks.models.builders.IncludesQueryBuilder;
import net.amcintosh.freshbooks.models.builders.QueryBuilder;
import net.amcintosh.freshbooks.resources.api.TimeTrackingResource;

import java.util.List;
import java.util.Map;

/**
 * FreshBooks TimeEntries resource with calls to get, list, create, update, delete
 */
public class TimeEntries extends TimeTrackingResource {

    /**
     * @param freshBooksClient Initialized instance of FreshBooksClient
     */
    public TimeEntries(FreshBooksClient freshBooksClient) {
        super(freshBooksClient);
    }

    @Override
    protected String getPathForSingle() {
        return "time_entries";
    }

    @Override
    protected String getPathForList() {
        return "time_entries";
    }

    /**
     * Get a list of time entries.
     *
     * @param businessId Id of the business
     * @return TimeEntryList containing time entries, pagination, and billing details.
     * @throws FreshBooksException If the call is not successful
     */
    public TimeEntryList list(long businessId) throws FreshBooksException {
        return this.list(businessId, null);
    }

    /**
     * Get a list of time entries using the query strings generated by the QueryBuilder list.
     *
     * @param businessId Id of the business
     * @param builders List of QueryBuilders
     * @return ProjectList containing time entries and pagination details
     * @throws FreshBooksException If the call is not successful
     */
    public TimeEntryList list(long businessId, List<QueryBuilder> builders) throws FreshBooksException {
        String url = this.getUrl(businessId, builders);
        ProjectListResponse result = this.handleListRequest(url);
        return new TimeEntryList(result);
    }

    /**
     * Get a single time entry with the corresponding id.
     *
     * @param businessId Id of the business
     * @param timeEntryId Id of the resource to return
     *
     * @return The TimeEntry
     * @throws FreshBooksException If the call is not successful
     */
    public TimeEntry get(long businessId, long timeEntryId) throws FreshBooksException {
        return this.get(businessId, timeEntryId, null);
    }

    /**
     * Get a single time entry with the corresponding id.
     *
     * @param businessId Id of the business
     * @param timeEntryId Id of the resource to return
     * @param builder IncludesQueryBuilder object for including additional data, sub-resources, etc.
     *
     * @return The TimeEntry
     * @throws FreshBooksException If the call is not successful
     */
    public TimeEntry get(long businessId, long timeEntryId, IncludesQueryBuilder builder) throws FreshBooksException {
        String url = this.getUrl(businessId, timeEntryId, builder);
        ProjectResponse result = this.handleRequest(HttpMethods.GET, url);
        return result.timeEntry;
    }

    /**
     * Create a new time entry from the provided TimeEntry model.
     * Makes a POST call against the time_entries resource endpoint.
     *
     * This calls `timeEntry.getContent()` to get a hash map of data.
     *
     * @param businessId Id of the business
     * @param data TimeEntry model with create data
     *
     * @return The created TimeEntry
     * @throws FreshBooksException If the call is not successful
     */
    public TimeEntry create(long businessId, TimeEntry data) throws FreshBooksException {
        return this.create(businessId, data.getContent());
    }

    /**
     * Create a new time entry from the provided data.
     * Makes a POST call against the time_entries resource endpoint.
     *
     * @param businessId Id of the business
     * @param data Map of create data
     *
     * @return The created TimeEntry
     * @throws FreshBooksException If the call is not successful
     */
    public TimeEntry create(long businessId, Map<String, Object> data) throws FreshBooksException {
        String url = this.getUrl(businessId);
        ImmutableMap<String, Object> content = ImmutableMap.of("time_entry", data);
        ProjectResponse result = this.handleRequest(HttpMethods.POST, url, content);
        return result.timeEntry;
    }

    /**
     * Update the time entry with the corresponding id.
     * Makes a PUT call against the time_entries resource endpoint.
     *
     * @param businessId Id of the business
     * @param timeEntryId Id of the resource to update
     * @param data TimeEntry model with updated data
     *
     * @return The updated TimeEntry
     * @throws FreshBooksException If the call is not successful
     */
    public TimeEntry update(long businessId, long timeEntryId, TimeEntry data) throws FreshBooksException {
        return this.update(businessId, timeEntryId, data.getContent());
    }

    /**
     * Update the time entry with the corresponding id.
     * Makes a PUT call against the time_entries resource endpoint.
     *
     * @param businessId Id of the business
     * @param timeEntryId Id of the resource to update
     * @param data Map of data to change
     *
     * @return The updated TimeEntry
     * @throws FreshBooksException If the call is not successful
     */
    public TimeEntry update(long businessId, long timeEntryId, Map<String, Object> data) throws FreshBooksException {
        String url = this.getUrl(businessId, timeEntryId);
        ImmutableMap<String, Object> content = ImmutableMap.of("time_entry", data);
        ProjectResponse result = this.handleRequest(HttpMethods.PUT, url, content);
        return result.timeEntry;
    }

    /**
     * Delete the time entry with the corresponding id.
     * Makes a DELETE call against the time_entries resource endpoint.
     * <br><br>
     * <i>Note:</i> Most FreshBooks resources are soft-deleted,
     *
     * @param businessId Id of the business
     * @param timeEntryId Id of the resource to update
     *
     * @throws FreshBooksException If the call is not successful
     */
    public void delete(long businessId, long timeEntryId) throws FreshBooksException {
        String url = this.getUrl(businessId, timeEntryId);
        this.handleRequest(HttpMethods.DELETE, url);
    }
}
