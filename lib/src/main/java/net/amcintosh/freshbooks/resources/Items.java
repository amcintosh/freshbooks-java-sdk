package net.amcintosh.freshbooks.resources;

import com.google.api.client.http.HttpMethods;
import com.google.common.collect.ImmutableMap;
import net.amcintosh.freshbooks.FreshBooksClient;
import net.amcintosh.freshbooks.FreshBooksException;
import net.amcintosh.freshbooks.models.*;
import net.amcintosh.freshbooks.models.api.AccountingListResponse;
import net.amcintosh.freshbooks.models.api.AccountingResponse;
import net.amcintosh.freshbooks.models.builders.IncludesQueryBuilder;
import net.amcintosh.freshbooks.models.builders.QueryBuilder;
import net.amcintosh.freshbooks.resources.api.AccountingResource;

import java.util.List;
import java.util.Map;

/**
 * FreshBooks items resource with calls to get, list, create, update, delete
 */
public class Items extends AccountingResource {

    public Items(FreshBooksClient freshBooksClient) {
        super(freshBooksClient);
    }

    @Override
    protected String getPath() {
        return "items/items";
    }

    /**
     * Get a list of items using the query strings generated by the QueryBuilder list.
     *
     * @param accountId Id of the account
     * @return ItemList containing items and pagination details
     * @throws FreshBooksException If the call is not successful
     */
    public ItemList list(String accountId) throws FreshBooksException {
        return this.list(accountId, null);
    }

    /**
     * Get a list of items using the query strings generated by the QueryBuilder list.
     *
     * @param accountId Id of the account
     * @param builders List of QueryBuilders
     * @return ItemList containing items and pagination details
     * @throws FreshBooksException If the call is not successful
     */
    public ItemList list(String accountId, List<QueryBuilder> builders) throws FreshBooksException {
        String url = this.getUrl(accountId, builders);
        AccountingListResponse result = this.handleListRequest(url);
        return new ItemList(result.response.result);
    }

    /**
     * Get a single item with the corresponding id.
     *
     * @param accountId The alpha-numeric account id
     * @param itemId Id of the resource to return
     *
     * @return The Item
     * @throws FreshBooksException If the call is not successful
     */
    public Item get(String accountId, long itemId) throws FreshBooksException {
        return this.get(accountId, itemId, null);
    }

    /**
     * Get a single item with the corresponding id.
     *
     * @param accountId The alpha-numeric account id
     * @param itemId Id of the resource to return
     * @param builder IncludesQueryBuilder object for including additional data, sub-resources, etc.
     *
     * @return The Item
     * @throws FreshBooksException If the call is not successful
     */
    public Item get(String accountId, long itemId, IncludesQueryBuilder builder) throws FreshBooksException {
        String url = this.getUrl(accountId, itemId, builder);
        AccountingResponse result = this.handleRequest(HttpMethods.GET, url);
        return result.response.result.item;
    }

    /**
     * Create a new item from the provided Item model.
     * Makes a POST call against the item resource endpoint.
     *
     * This calls `item.getContent()` to get a hash map of data.
     *
     * @param accountId The alpha-numeric account id
     * @param data Ttem model with create data
     *
     * @return The created Item
     * @throws FreshBooksException If the call is not successful
     */
    public Item create(String accountId, Item data) throws FreshBooksException {
        return this.create(accountId, data.getContent());
    }

    /**
     * Create a new item from the provided data.
     * Makes a POST call against the item resource endpoint.
     *
     * @param accountId The alpha-numeric account id
     * @param data Map of create data
     *
     * @return The created Item
     * @throws FreshBooksException If the call is not successful
     */
    public Item create(String accountId, Map<String, Object> data) throws FreshBooksException {
        String url = this.getUrl(accountId);
        ImmutableMap<String, Object> content = ImmutableMap.of("item", data);
        AccountingResponse result = this.handleRequest(HttpMethods.POST, url, content);
        return result.response.result.item;
    }

    /**
     * Update the item with the corresponding id.
     * Makes a PUT call against the item resource endpoint.
     *
     * @param accountId The alpha-numeric account id
     * @param itemId Id of the resource to return
     * @param data Item model with updated data
     *
     * @return The updated Item
     * @throws FreshBooksException If the call is not successful
     */
    public Item update(String accountId, long itemId, Item data) throws FreshBooksException {
        return this.update(accountId, itemId, data.getContent());
    }

    /**
     * Update the item with the corresponding id.
     * Makes a PUT call against the item resource endpoint.
     *
     * @param accountId The alpha-numeric account id
     * @param itemId Id of the resource to update
     * @param data Map of data to change
     *
     * @return The updated Item
     * @throws FreshBooksException If the call is not successful
     */
    public Item update(String accountId, long itemId, Map<String, Object> data) throws FreshBooksException {
        String url = this.getUrl(accountId, itemId);
        ImmutableMap<String, Object> content = ImmutableMap.of("item", data);
        AccountingResponse result = this.handleRequest(HttpMethods.PUT, url, content);
        return result.response.result.item;
    }

    /**
     * Delete the item with the corresponding id.
     * Makes a PUT call against the item resource endpoint with a `vis_state` of deleted.
     * <br><br>
     * <i>Note:</i> Most FreshBooks resources are soft-deleted,
     * @see <a href="https://www.freshbooks.com/api/active_deleted">FreshBooks API - Active and Deleted Objects</a>
     *
     * @param accountId The alpha-numeric account id
     * @param itemId Id of the resource to update
     *
     * @return The deleted Item
     * @throws FreshBooksException If the call is not successful
     */
    public Item delete(String accountId, long itemId) throws FreshBooksException {
        ImmutableMap<String, Object> data = ImmutableMap.of("vis_state", VisState.DELETED.getValue());
        return this.update(accountId, itemId, data);
    }

}
